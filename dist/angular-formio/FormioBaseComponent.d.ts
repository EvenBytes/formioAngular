import { ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, OnInit } from '@angular/core';
import { FormioService } from './formio.service';
import { FormioAlerts } from './components/alerts/formio.alerts';
import { FormioAppConfig } from './formio.config';
import { FormioForm, FormioOptions, FormioRefreshValue } from './formio.common';
import { CustomTagsService } from './custom-component/custom-tags.service';
import { AlertsPosition } from './types/alerts-position';
import * as i0 from "@angular/core";
export declare class FormioBaseComponent implements OnInit, OnChanges, OnDestroy {
    ngZone: NgZone;
    config: FormioAppConfig;
    customTags?: CustomTagsService;
    form?: FormioForm;
    submission?: any;
    src?: string;
    url?: string;
    service?: FormioService;
    options?: FormioOptions;
    noeval?: any;
    formioOptions?: any;
    renderOptions?: any;
    readOnly?: boolean;
    viewOnly?: boolean;
    hideLoading?: boolean;
    hideComponents?: string[];
    refresh?: EventEmitter<FormioRefreshValue>;
    error?: EventEmitter<any>;
    success?: EventEmitter<object>;
    submitDone?: EventEmitter<object>;
    language?: EventEmitter<string>;
    hooks?: any;
    renderer?: any;
    watchSubmissionErrors?: boolean;
    dataTableActions?: any;
    render: EventEmitter<object>;
    customEvent: EventEmitter<object>;
    fileUploadingStatus: EventEmitter<string>;
    submit: EventEmitter<object>;
    prevPage: EventEmitter<object>;
    nextPage: EventEmitter<object>;
    beforeSubmit: EventEmitter<object>;
    rowAdd: EventEmitter<any>;
    rowAdded: EventEmitter<any>;
    rowEdit: EventEmitter<any>;
    rowEdited: EventEmitter<any>;
    rowDelete: EventEmitter<any>;
    rowClick: EventEmitter<any>;
    rowSelectChange: EventEmitter<any>;
    page: EventEmitter<any>;
    changeItemsPerPage: EventEmitter<any>;
    change: EventEmitter<object>;
    invalid: EventEmitter<boolean>;
    errorChange: EventEmitter<any>;
    formLoad: EventEmitter<any>;
    submissionLoad: EventEmitter<any>;
    ready: EventEmitter<FormioBaseComponent>;
    formioElement?: ElementRef<any>;
    AlertsPosition: typeof AlertsPosition;
    formio: any;
    initialized: boolean;
    alerts: FormioAlerts;
    formioReady: Promise<any>;
    private formioReadyResolve;
    private submitting;
    private submissionSuccess;
    isLoading: boolean;
    noAlerts: boolean;
    label: string;
    constructor(ngZone: NgZone, config: FormioAppConfig, customTags?: CustomTagsService);
    getRenderer(): any;
    getRendererOptions(): any;
    createRenderer(): any;
    setFormUrl(url: any): void;
    setForm(form: FormioForm): any;
    attachFormEvents(): void;
    initialize(): void;
    ngOnInit(): void;
    setFormFromSrc(): void;
    ngOnDestroy(): void;
    onRefresh(refresh: FormioRefreshValue): void;
    ngOnChanges(changes: any): void;
    onPrevPage(data: any): void;
    onNextPage(data: any): void;
    onSubmit(submission: any, saved: boolean, noemit?: boolean): void;
    onError(err: any): void;
    focusOnComponet(key: any): void;
    submitExecute(submission: object, saved?: boolean): void;
    submitForm(submission: any, saved?: boolean): void;
    onChange(value: any, flags: any, isModified: boolean): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<FormioBaseComponent, [null, { optional: true; }, { optional: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<FormioBaseComponent, "ng-component", never, { "form": { "alias": "form"; "required": false; }; "submission": { "alias": "submission"; "required": false; }; "src": { "alias": "src"; "required": false; }; "url": { "alias": "url"; "required": false; }; "service": { "alias": "service"; "required": false; }; "options": { "alias": "options"; "required": false; }; "noeval": { "alias": "noeval"; "required": false; }; "formioOptions": { "alias": "formioOptions"; "required": false; }; "renderOptions": { "alias": "renderOptions"; "required": false; }; "readOnly": { "alias": "readOnly"; "required": false; }; "viewOnly": { "alias": "viewOnly"; "required": false; }; "hideLoading": { "alias": "hideLoading"; "required": false; }; "hideComponents": { "alias": "hideComponents"; "required": false; }; "refresh": { "alias": "refresh"; "required": false; }; "error": { "alias": "error"; "required": false; }; "success": { "alias": "success"; "required": false; }; "submitDone": { "alias": "submitDone"; "required": false; }; "language": { "alias": "language"; "required": false; }; "hooks": { "alias": "hooks"; "required": false; }; "renderer": { "alias": "renderer"; "required": false; }; "watchSubmissionErrors": { "alias": "watchSubmissionErrors"; "required": false; }; "dataTableActions": { "alias": "dataTableActions"; "required": false; }; }, { "render": "render"; "customEvent": "customEvent"; "fileUploadingStatus": "fileUploadingStatus"; "submit": "submit"; "prevPage": "prevPage"; "nextPage": "nextPage"; "beforeSubmit": "beforeSubmit"; "rowAdd": "rowAdd"; "rowAdded": "rowAdded"; "rowEdit": "rowEdit"; "rowEdited": "rowEdited"; "rowDelete": "rowDelete"; "rowClick": "rowClick"; "rowSelectChange": "rowSelectChange"; "page": "page"; "changeItemsPerPage": "changeItemsPerPage"; "change": "change"; "invalid": "invalid"; "errorChange": "errorChange"; "formLoad": "formLoad"; "submissionLoad": "submissionLoad"; "ready": "ready"; }, never, never, false, never>;
}
//# sourceMappingURL=FormioBaseComponent.d.ts.map